#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

#define PI 3.141592654

FILE *in1;
FILE *out1;

char line1[10000];

main()
{	int mol=1, atom=1, mol_out, atom_out, n_peptide, i_peptide, n_atom_peptide, i_atom_peptide;
	int i, j, k, ki, temp_i, temp_j;
	int n_grid, N_grid, i_grid;
	double x,y,z,xv, yv, zv, dd, D, r, rr, box_l, box_c, de=3.5, dist_GS=0.25; //de=dist_edge, 
   
	double M=197.0, den=19.30, Na=602;
	double a=pow(4*M/den/Na,1.0/3.0), aa=a/2.0;

	double x_new, y_new, z_new;
	double x_old, y_old, z_old;
	double angle_x, angle_y, angle_z;
	double delt_angle_x, delt_angle_y, delt_angle_z;
	char resid_name[5], atom_name[5];

	in1=fopen("peptide.gro", "r");
	out1=fopen("au-peptide.gro", "w");

	printf("Please inpute the diameter (nm) of nanopartile:");
	scanf("%lf", &D);

	box_l=D+de*2;  
	box_c=box_l/2;

	r=D/2.0;
	rr=r*r;

	printf("Please inpute the number of peptide to place on the surface of gold nanoparticle:");
	scanf("%d", &n_peptide);
	delt_angle_x=PI;

	n_grid=n_peptide-2;
	n_grid=(int)(sqrt(n_grid/4)-0.00000000000001)+1;
	N_grid=n_grid*2;

	delt_angle_y=PI/N_grid;

	fgets(line1, 10000, in1);
	fprintf(out1,"GNP particle d = %3.1lf nm and no. of peptides = %d \n", r*2, n_peptide);

	fgets(line1, 10000, in1);
	sscanf(line1, "%d", &n_atom_peptide);

	fprintf(out1,"the total number of atoms\n");

/////Real gold part
	for(i=-((int)(r/a)+1);i<=((int)(r/a)+1);i++)
	{	x=i*a;
		for(j=-((int)(r/a)+1);j<=((int)(r/a)+1);j++)
		{	y=j*a;
			for(k=-((int)(r/a)+1);k<=((int)(r/a)+1);k++)
			{	z=k*a;
				dd=pow(x,2)+pow(y,2)+pow(z,2);
				if(dd<=rr)
				{	atom_out=atom;
					mol_out=mol;
					if(atom>99999)	{	atom_out=atom-atom/100000*100000;}
					if(mol>99999)	{	mol_out=mol-mol/100000*100000;}
					fprintf(out1, "%5dGold    AU%5d%8.3lf%8.3lf%8.3lf\n", mol_out, atom_out, x+box_c, y+box_c, z+box_c);  
					atom++;
					mol++;
				}
				dd=pow(x,2)+pow((y+aa),2)+pow((z+aa),2);
				if(dd<=rr)
				{	atom_out=atom;
					mol_out=mol;
					if(atom>99999)	{	atom_out=atom-atom/100000*100000;}
					if(mol>99999)	{	mol_out=mol-mol/100000*100000;}
					fprintf(out1, "%5dGold    AU%5d%8.3lf%8.3lf%8.3lf\n", mol_out, atom_out, x+box_c, y+box_c+aa, z+box_c+aa);  
					atom++;
					mol++;
				}
				dd=pow((x+aa),2)+pow(y,2)+pow((z+aa),2);
				if(dd<=rr)
				{	atom_out=atom;
					mol_out=mol;
					if(atom>99999)	{	atom_out=atom-atom/100000*100000;}
					if(mol>99999)	{	mol_out=mol-mol/100000*100000;}
					fprintf(out1, "%5dGold    AU%5d%8.3lf%8.3lf%8.3lf\n", mol_out, atom_out, x+box_c+aa, y+box_c, z+box_c+aa);  
					atom++;
					mol++;
				}
				dd=pow((x+aa),2)+pow((y+aa),2)+pow(z,2);
				if(dd<=rr)
				{	atom_out=atom;
					mol_out=mol;
					if(atom>99999)	{	atom_out=atom-atom/100000*100000;}
					if(mol>99999)	{	mol_out=mol-mol/100000*100000;}
					fprintf(out1, "%5dGold    AU%5d%8.3lf%8.3lf%8.3lf\n", mol_out, atom_out, x+box_c+aa, y+box_c+aa, z+box_c);  
					atom++;
					mol++;
				}
			}
		}
	}
///////End of real gold part


//////Peptide part
	i_peptide=0;
	for(i=0;i*delt_angle_x<PI;i++)
	{	angle_x=i*delt_angle_x;

		for(j=0;j<=n_grid;j++)
		{	angle_y=j*delt_angle_y;

			i_grid=2*(n_grid-j); if(j==n_grid) {i_grid=1;}
			delt_angle_z=PI/i_grid;
			for(k=0;k<i_grid;k++)
			{	angle_z=k*delt_angle_z;
				for(i_atom_peptide=0;i_atom_peptide<n_atom_peptide;i_atom_peptide++)
				{	fgets(line1, 10000, in1);
					sscanf(line1, "%5d%5s%5s%5d%lf%lf%lf", &temp_i, resid_name, atom_name, &temp_j, &x_old, &y_old, &z_old);
//step 1: shift to be away from the source point by r+dist_GS along X axis as the source peptide is place on X axis
					if(i_atom_peptide==9)
					{	xv=x_old+r;
						yv=y_old;
						zv=z_old;
					}
					x_new=x_old+r+dist_GS;
					y_new=y_old;
					z_new=z_old;
					x_old=x_new;
					y_old=y_new;
					z_old=z_new;
//step 2: rotate around x axis       
					x_new=x_old;
					y_new=y_old*cos(angle_x)-z_old*sin(angle_x);
					z_new=y_old*sin(angle_x)+z_old*cos(angle_x);
					x_old=x_new;
					y_old=y_new;
					z_old=z_new;
//step 3: rotate around y axis
					x_new=x_old*cos(angle_y)+z_old*sin(angle_y);
					y_new=y_old;
					z_new=z_old*cos(angle_y)-x_old*sin(angle_y);
					x_old=x_new;
					y_old=y_new;
					z_old=z_new;
//step 4: rotate around z axis              
					x_new=x_old*cos(angle_z)-y_old*sin(angle_z);
					y_new=x_old*sin(angle_z)+y_old*cos(angle_z);
					z_new=z_old;
					x_old=x_new;
					y_old=y_new;
					z_old=z_new;
//step 5: shift to around the gold particle
					x_new=x_old+box_c;
					y_new=y_old+box_c;
					z_new=z_old+box_c;
//step 6: output
					atom_out=atom;
					if(atom>99999) { atom_out=atom-atom/100000*100000;}
					mol_out=mol;
					if(mol>99999)  { mol_out=mol-mol/100000*100000;}
					fprintf(out1, "%5d%-5s%5s%05d%8.3lf%8.3lf%8.3lf\n", mol_out, resid_name, atom_name, atom_out, x_new, y_new, z_new);
					atom++;
				}
// for virtual gold atom
				x_new=xv;
				y_new=yv;
				z_new=zv;
				x_old=x_new;
				y_old=y_new;
				z_old=z_new;   
				x_new=x_old;
				y_new=y_old*cos(angle_x)-z_old*sin(angle_x);
				z_new=y_old*sin(angle_x)+z_old*cos(angle_x);
				x_old=x_new;
				y_old=y_new;
				z_old=z_new;          
				x_new=x_old*cos(angle_y)+z_old*sin(angle_y);
				y_new=y_old;
				z_new=z_old*cos(angle_y)-x_old*sin(angle_y);
				x_old=x_new;
				y_old=y_new;
				z_old=z_new;      
				x_new=x_old*cos(angle_z)-y_old*sin(angle_z);
				y_new=x_old*sin(angle_z)+y_old*cos(angle_z);
				z_new=z_old;
				x_old=x_new;
				y_old=y_new;
				z_old=z_new;
				x_new=x_old+box_c;
				y_new=y_old+box_c;
				z_new=z_old+box_c;
				atom_out=atom;
				if(atom>99999) { atom_out=atom-atom/100000*100000;}
				mol_out=mol;
				if(mol>99999)  { mol_out=mol-mol/100000*100000;}
				fprintf(out1, "%5dVirt   AUV%05d%8.3lf%8.3lf%8.3lf\n", mol_out, atom_out, x_new, y_new, z_new);
				atom++;
// end of virtual gold atom			
	
				rewind(in1);
				fgets(line1, 10000, in1);
				fgets(line1, 10000, in1);
				mol++;

				i_peptide++;
				if(i_peptide>=n_peptide)
				{	goto out;
				}

				for(i_atom_peptide=0;i_atom_peptide<n_atom_peptide;i_atom_peptide++)
				{	fgets(line1, 10000, in1);
					sscanf(line1, "%5d%5s%5s%5d%lf%lf%lf", &temp_i, resid_name, atom_name, &temp_j, &x_old, &y_old, &z_old);
//inverse the peptide
//step 1: shift to be away from the source point by -r-dist_GS along -X axis as the source peptide is place on X axis
					if(i_atom_peptide==9)
					{	xv=-x_old-r;
						yv=-y_old;
						zv=-z_old;
					}
					x_new=-x_old-r-dist_GS;
					y_new=-y_old;
					z_new=-z_old;
					x_old=x_new;
					y_old=y_new;
					z_old=z_new;
//step 2: rotate around x axis       
					x_new=x_old;
					y_new=y_old*cos(angle_x)-z_old*sin(angle_x);
					z_new=y_old*sin(angle_x)+z_old*cos(angle_x);
					x_old=x_new;
					y_old=y_new;
					z_old=z_new;
//step 3: rotate around y axis   
					x_new=x_old*cos(angle_y)+z_old*sin(angle_y);
					y_new=y_old;
					z_new=z_old*cos(angle_y)-x_old*sin(angle_y);
					x_old=x_new;
					y_old=y_new;
					z_old=z_new;
//step 4: rotate around z axis   
					x_new=x_old*cos(angle_z)-y_old*sin(angle_z);
					y_new=x_old*sin(angle_z)+y_old*cos(angle_z);
					z_new=z_old;
					x_old=x_new;
					y_old=y_new;
					z_old=z_new;
//step 5: shift to around the gold particle
					x_new=x_old+box_c;
					y_new=y_old+box_c;
					z_new=z_old+box_c;
//step 6: output
					atom_out=atom;
					if(atom>99999) { atom_out=atom-atom/100000*100000;}
					mol_out=mol;
					if(mol>99999)  { mol_out=mol-mol/100000*100000;}
					fprintf(out1, "%5d%-5s%5s%05d%8.3lf%8.3lf%8.3lf\n", mol_out, resid_name, atom_name, atom_out, x_new, y_new, z_new);
					atom++;
				}
// for virtual gold atom
				x_new=xv;
				y_new=yv;
				z_new=zv;
				x_old=x_new;
				y_old=y_new;
				z_old=z_new;   
				x_new=x_old;
				y_new=y_old*cos(angle_x)-z_old*sin(angle_x);
				z_new=y_old*sin(angle_x)+z_old*cos(angle_x);
				x_old=x_new;
				y_old=y_new;
				z_old=z_new;          
				x_new=x_old*cos(angle_y)+z_old*sin(angle_y);
				y_new=y_old;
				z_new=z_old*cos(angle_y)-x_old*sin(angle_y);
				x_old=x_new;
				y_old=y_new;
				z_old=z_new;      
				x_new=x_old*cos(angle_z)-y_old*sin(angle_z);
				y_new=x_old*sin(angle_z)+y_old*cos(angle_z);
				z_new=z_old;
				x_old=x_new;
				y_old=y_new;
				z_old=z_new;
				x_new=x_old+box_c;
				y_new=y_old+box_c;
				z_new=z_old+box_c;
				atom_out=atom;
				if(atom>99999) { atom_out=atom-atom/100000*100000;}
				mol_out=mol;
				if(mol>99999)  { mol_out=mol-mol/100000*100000;}
				fprintf(out1, "%5dVirt   AUV%05d%8.3lf%8.3lf%8.3lf\n", mol_out, atom_out, x_new, y_new, z_new);
				atom++;
// end of virtual gold atom		
				rewind(in1);
				fgets(line1, 10000, in1);
				fgets(line1, 10000, in1);
				mol++;

				i_peptide++;
				if(i_peptide>=n_peptide)
				{  goto out;
				}
			}
		} 

		for(j=1;j<n_grid;j++)
		{	angle_y=PI-j*delt_angle_y;

			i_grid=2*(n_grid-j); 
			delt_angle_z=PI/i_grid;
			for(k=0;k<i_grid;k++)
			{	angle_z=k*delt_angle_z;
				for(i_atom_peptide=0;i_atom_peptide<n_atom_peptide;i_atom_peptide++)
				{	fgets(line1, 10000, in1);
					sscanf(line1, "%5d%5s%5s%5d%lf%lf%lf", &temp_i, resid_name, atom_name, &temp_j, &x_old, &y_old, &z_old);
//step 1: shift to be away from the source point by r+dist_GS along X axis as the source peptide is place on X axis
					if(i_atom_peptide==9)
					{	xv=x_old+r;
						yv=y_old;
						zv=z_old;
					}
					x_new=x_old+r+dist_GS;
					y_new=y_old;
					z_new=z_old;
					x_old=x_new;
					y_old=y_new;
					z_old=z_new;
//step 2: rotate around x axis         
					x_new=x_old;
					y_new=y_old*cos(angle_x)-z_old*sin(angle_x);
					z_new=y_old*sin(angle_x)+z_old*cos(angle_x);
					x_old=x_new;
					y_old=y_new;
					z_old=z_new;
//step 3: rotate around y axis               
					x_new=x_old*cos(angle_y)+z_old*sin(angle_y);
					y_new=y_old;
					z_new=z_old*cos(angle_y)-x_old*sin(angle_y);
					x_old=x_new;
					y_old=y_new;
					z_old=z_new;
//step 4: rotate around z axis             
					x_new=x_old*cos(angle_z)-y_old*sin(angle_z);
					y_new=x_old*sin(angle_z)+y_old*cos(angle_z);
					z_new=z_old;
					x_old=x_new;
					y_old=y_new;
					z_old=z_new;
//step 5: shift to around the gold particle
					x_new=x_old+box_c;
					y_new=y_old+box_c;
					z_new=z_old+box_c;
//step 6: output
					atom_out=atom;
					if(atom>99999) { atom_out=atom-atom/100000*100000;}
					mol_out=mol;
					if(mol>99999)  { mol_out=mol-mol/100000*100000;}
					fprintf(out1, "%5d%-5s%5s%05d%8.3lf%8.3lf%8.3lf\n", mol_out, resid_name, atom_name, atom_out, x_new, y_new, z_new);
					atom++;
				}
// for virtual gold atom
				x_new=xv;
				y_new=yv;
				z_new=zv;
				x_old=x_new;
				y_old=y_new;
				z_old=z_new;   
				x_new=x_old;
				y_new=y_old*cos(angle_x)-z_old*sin(angle_x);
				z_new=y_old*sin(angle_x)+z_old*cos(angle_x);
				x_old=x_new;
				y_old=y_new;
				z_old=z_new;          
				x_new=x_old*cos(angle_y)+z_old*sin(angle_y);
				y_new=y_old;
				z_new=z_old*cos(angle_y)-x_old*sin(angle_y);
				x_old=x_new;
				y_old=y_new;
				z_old=z_new;      
				x_new=x_old*cos(angle_z)-y_old*sin(angle_z);
				y_new=x_old*sin(angle_z)+y_old*cos(angle_z);
				z_new=z_old;
				x_old=x_new;
				y_old=y_new;
				z_old=z_new;
				x_new=x_old+box_c;
				y_new=y_old+box_c;
				z_new=z_old+box_c;
				atom_out=atom;
				if(atom>99999) { atom_out=atom-atom/100000*100000;}
				mol_out=mol;
				if(mol>99999)  { mol_out=mol-mol/100000*100000;}
				fprintf(out1, "%5dVirt   AUV%05d%8.3lf%8.3lf%8.3lf\n", mol_out, atom_out, x_new, y_new, z_new);
				atom++;
// end of virtual gold atom		
				rewind(in1);
				fgets(line1, 10000, in1);
				fgets(line1, 10000, in1);
				mol++;

				i_peptide++;
				if(i_peptide>=n_peptide)
				{	goto out;
				}

				for(i_atom_peptide=0;i_atom_peptide<n_atom_peptide;i_atom_peptide++)
				{	fgets(line1, 10000, in1);
					sscanf(line1, "%5d%5s%5s%5d%lf%lf%lf", &temp_i, resid_name, atom_name, &temp_j, &x_old, &y_old, &z_old);
//inverse the peptide
//step 1: shift to be away from the source point by -r-dist_GS along -X axis as the source peptide is place on X axis
					if(i_atom_peptide==9)
					{	xv=-x_old-r;
						yv=-y_old;
						zv=-z_old;
					}
					x_new=-x_old-r-dist_GS;
					y_new=-y_old;
					z_new=-z_old;
					x_old=x_new;
					y_old=y_new;
					z_old=z_new;
//step 2: rotate around x axis       
					x_new=x_old;
					y_new=y_old*cos(angle_x)-z_old*sin(angle_x);
					z_new=y_old*sin(angle_x)+z_old*cos(angle_x);
					x_old=x_new;
					y_old=y_new;
					z_old=z_new;
//step 3: rotate around y axis   
					x_new=x_old*cos(angle_y)+z_old*sin(angle_y);
					y_new=y_old;
					z_new=z_old*cos(angle_y)-x_old*sin(angle_y);
					x_old=x_new;
					y_old=y_new;
					z_old=z_new;
//step 4: rotate around z axis   
					x_new=x_old*cos(angle_z)-y_old*sin(angle_z);
					y_new=x_old*sin(angle_z)+y_old*cos(angle_z);
					z_new=z_old;
					x_old=x_new;
					y_old=y_new;
					z_old=z_new;
//step 5: shift to around the gold particle
					x_new=x_old+box_c;
					y_new=y_old+box_c;
					z_new=z_old+box_c;
//step 6: output
					atom_out=atom;
					if(atom>99999) { atom_out=atom-atom/100000*100000;}
					mol_out=mol;
					if(mol>99999)  { mol_out=mol-mol/100000*100000;}
					fprintf(out1, "%5d%-5s%5s%05d%8.3lf%8.3lf%8.3lf\n", mol_out, resid_name, atom_name, atom_out, x_new, y_new, z_new);
					atom++;
				}
				x_new=xv;
				y_new=yv;
				z_new=zv;
				x_old=x_new;
				y_old=y_new;
				z_old=z_new;   
				x_new=x_old;
				y_new=y_old*cos(angle_x)-z_old*sin(angle_x);
				z_new=y_old*sin(angle_x)+z_old*cos(angle_x);
				x_old=x_new;
				y_old=y_new;
				z_old=z_new;          
				x_new=x_old*cos(angle_y)+z_old*sin(angle_y);
				y_new=y_old;
				z_new=z_old*cos(angle_y)-x_old*sin(angle_y);
				x_old=x_new;
				y_old=y_new;
				z_old=z_new;      
				x_new=x_old*cos(angle_z)-y_old*sin(angle_z);
				y_new=x_old*sin(angle_z)+y_old*cos(angle_z);
				z_new=z_old;
				x_old=x_new;
				y_old=y_new;
				z_old=z_new;
				x_new=x_old+box_c;
				y_new=y_old+box_c;
				z_new=z_old+box_c;
				atom_out=atom;
				if(atom>99999) { atom_out=atom-atom/100000*100000;}
				mol_out=mol;
				if(mol>99999)  { mol_out=mol-mol/100000*100000;}
				fprintf(out1, "%5dVirt   AUV%05d%8.3lf%8.3lf%8.3lf\n", mol_out, atom_out, x_new, y_new, z_new);
				atom++;
// end of virtual gold atom		
				rewind(in1);
				fgets(line1, 10000, in1);
				fgets(line1, 10000, in1);
				mol++;

				i_peptide++;
				if(i_peptide>=n_peptide)
				{	goto out;
				}
			}
		} 

out: break;
	}
/////End of peptide part

	fprintf(out1,"%10.5lf%10.5lf%10.5lf\n", box_l, box_l, box_l);

	fclose(in1);
	fclose(in1);
	fclose(out1);
}
